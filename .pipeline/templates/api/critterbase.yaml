apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: critterbase
  labels:
    app: critterbase
parameters:
  # Openshift namespace config
  - name: NAMESPACE_PREFIX
    description: Openshift namespace prefix
    value: d9ccb0
  - name: NAMESPACE_ENVIRONMENT
    description: Openshift namespace environment suffix ie. 'dev', 'test' or 'prod'
    value: '' # Value needs to be injected into the template ie: -p
  - name: TEMPLATE_TAG
    description: Label (tag) to group template objects together
    value: '' # Value needs to be injected into the template ie: -p
  - name: BASE_IMAGE_REGISTRY_URL
    description: The base image registry URL
    value: image-registry.openshift-image-registry.svc:5000

  # General config
  - name: CRITTERBASE_GITHUB_URL
    value: https://github.com/bcgov/critterbase-api.git
  - name: APP_NAME
    value: critterbase

  # API deployment resources
  - name: API_CPU_REQUEST
    value: 100m
  - name: API_CPU_LIMIT
    value: 350m
  - name: API_MEMORY_REQUEST
    value: 250Mi
  - name: API_MEMORY_LIMIT
    value: 1Gi
  - name: API_REPLICAS
    value: '1'

  # API build resources
  - name: API_BUILD_CPU_REQUEST
    value: 50m
  - name: API_BUILD_CPU_LIMIT
    value: 1000m
  - name: API_BUILD_MEMORY_REQUEST
    value: 100Mi
  - name: API_BUILD_MEMORY_LIMIT
    value: 4Gi

  # DB deployment resources
  - name: DB_CPU_REQUEST
    value: 50m
  - name: DB_CPU_LIMIT
    value: 250m
  - name: DB_MEMORY_REQUEST
    value: 50Mi
  - name: DB_MEMORY_LIMIT
    value: 500Mi
  - name: DB_REPLICAS
    value: '1'
  - name: DB_PVC_SIZE
    value: '' #  Value needs to be injected into the template ie: -p

  # Secrets and keys
  - name: CRITTERBASE_GITHUB_WEBHOOK_SECRET
    value: critterbase-api-build-webhook
  - name: DATABASE_CONNECTION_SECRET
    description: The name of the secret that stores the full connection string
    value: critterbase-db-prisma-url
  - name: DATABASE_CONNECTION_KEY
    description: The name of the key that holds the connection string
    value: url
  - name: DATABASE_CREDENTIALS_SECRET
    description: The name of the key that stores the database credentials
    value: postgresql
  - name: DATABASE_PASSWORD_KEY
    description: The name of the key that stores the database password
    value: database-password
  - name: DATABASE_USER_KEY
    description: The name of the key that stores the database user
    value: database-user
  - name: DATABASE_NAME_KEY
    description: The name of the key that stores the database name
    value: database-name
  - name: DEFAULT_POSTGRES_PASSWORD_SECRET
    value: default-postgres-password
  - name: DEFAULT_POSTGRES_PASSWORD_KEY
    value: password

  # Database config
  - name: DATABASE_PORT
    value: '5432'

  # API config
  - name: NODE_ENV
    value: production
  - name: API_PORT
    value: '8080'

  # API config: Keycloak
  - name: KEYCLOAK_HOST
    value: '' # Value needs to be injected into the template ie: -p
  - name: KEYCLOAK_REALM
    value: standard
  - name: ALLOWED_AUD
    description: Space delimited list of allowed JWT token audiences that can access Critterbase API.
    value: 'sims-4461 sims-svc-4464'

  # API config: Itis Web Service
  - name: ITIS_WEB_SERVICE
    value: http://www.itis.gov/ITISWebService/jsonservice/ITISService
  - name: ITIS_SOLR_SERVICE
    value: https://services.itis.gov

objects:
    # API Service <NAMESPACE_ENVIRONMENT>
    - kind: Service
      apiVersion: v1
      metadata:
        name: ${APP_NAME}-api
        namespace: ${NAMESPACE_PREFIX}-${NAMESPACE_ENVIRONMENT}
        labels:
          app: ${APP_NAME}
          name: ${APP_NAME}-api
          tag: ${TEMPLATE_TAG}
      spec:
        ports:
          - name: ${API_PORT}-tcp
            protocol: TCP
            port: ${{API_PORT}}
            targetPort: ${{API_PORT}}
        selector:
          app: ${APP_NAME}
          name: ${APP_NAME}-api
        sessionAffinity: None
        type: ClusterIP

    # Database Service <NAMESPACE_ENVIRONMENT>
    - kind: Service
      apiVersion: v1
      metadata:
        name: ${APP_NAME}-db
        namespace: ${NAMESPACE_PREFIX}-${NAMESPACE_ENVIRONMENT}
        labels:
          app: ${APP_NAME}
          name: ${APP_NAME}-db
          tag: ${TEMPLATE_TAG}
      spec:
        ports:
          - name: ${APP_NAME}-db
            protocol: TCP
            port: ${{DATABASE_PORT}}
            targetPort: ${{DATABASE_PORT}}
        selector:
          app: ${APP_NAME}
          name: ${APP_NAME}-db
        ipFamilyPolicy: SingleStack
        sessionAffinity: None
        type: ClusterIP

    # API Route <NAMESPACE_ENVIRONMENT>
    - kind: Route
      apiVersion: route.openshift.io/v1
      metadata:
        name: ${APP_NAME}-api
        namespace: ${NAMESPACE_PREFIX}-${NAMESPACE_ENVIRONMENT}
        annotations:
        labels:
          app: ${APP_NAME}
          name: ${APP_NAME}-api
          tag: ${TEMPLATE_TAG}
      spec:
        host: moe-critterbase-api-${NAMESPACE_ENVIRONMENT}.apps.silver.devops.gov.bc.ca
        path: /api/
        to:
          kind: Service
          name: ${APP_NAME}-api
          weight: 100
        port:
          targetPort: ${API_PORT}-tcp
        tls:
          insecureEdgeTerminationPolicy: Redirect
          termination: edge
        wildcardPolicy: None
      status:
        ingress: null

    # API Deployment <NAMESPACE_ENVIRONMENT>
    - kind: Deployment
      apiVersion: apps/v1
      metadata:
        name: ${APP_NAME}-api
        namespace: ${NAMESPACE_PREFIX}-${NAMESPACE_ENVIRONMENT}
        annotations:
          openshift.io/generated-by: OpenShiftWebConsole
        generation: 0
        labels:
          app: ${APP_NAME}
          name: ${APP_NAME}-api
          tag: ${TEMPLATE_TAG}
      spec:
        replicas: ${{API_REPLICAS}}
        revisionHistoryLimit: 5
        selector:
          matchLabels:
            name: ${APP_NAME}-api
        strategy:
          type: RollingUpdate
          rollingUpdate:
            maxSurge: 25%
            maxUnavailable: 25%
        template:
          metadata:
            annotations: null
            labels:
              app: ${APP_NAME}
              name: ${APP_NAME}-api
              tag: ${TEMPLATE_TAG}
          spec:
            containers:
              - resources:
                  limits:
                    cpu: ${API_CPU_LIMIT}
                    memory: ${API_MEMORY_LIMIT}
                  requests:
                    cpu: ${API_CPU_REQUEST}
                    memory: ${API_MEMORY_REQUEST}
                # Check the API pod is ready to startup every 10 seconds (max 10 times)
                startupProbe:
                  httpGet:
                    path: /api
                    port: ${{API_PORT}}
                    scheme: HTTP
                  periodSeconds: 10
                  timeoutSeconds: 5
                  failureThreshold: 10
                # Check the API pod is ready every 30 seconds
                readinessProbe:
                  httpGet:
                    path: /api
                    port: ${{API_PORT}}
                    scheme: HTTP
                  periodSeconds: 30
                  timeoutSeconds: 5
                  successThreshold: 1
                  failureThreshold: 3
                # Check API pod is alive every 30 seconds
                livenessProbe:
                  httpGet:
                    path: /api
                    port: ${{API_PORT}}
                    scheme: HTTP
                  periodSeconds: 30
                  timeoutSeconds: 5
                  successThreshold: 1
                  failureThreshold: 3
                terminationMessagePath: /dev/termination-log
                name: ${APP_NAME}-api
                env:
                  - name: NODE_ENV
                    value: ${NODE_ENV}
                  - name: PORT
                    value: ${API_PORT}
                  - name: DATABASE_URL
                    valueFrom:
                      secretKeyRef:
                        name: ${DATABASE_CONNECTION_SECRET}
                        key: ${DATABASE_CONNECTION_KEY}
                  - name: KEYCLOAK_HOST
                    value: ${KEYCLOAK_HOST}
                  - name: KEYCLOAK_REALM
                    value: ${KEYCLOAK_REALM}
                  - name: ALLOWED_AUD
                    value: ${ALLOWED_AUD}
                  - name: ITIS_WEB_SERVICE
                    value: ${ITIS_WEB_SERVICE}
                  - name: ITIS_SOLR_SERVICE
                    value: ${ITIS_SOLR_SERVICE}
                ports:
                  - containerPort: ${{API_PORT}}
                    protocol: TCP
                imagePullPolicy: IfNotPresent
                terminationMessagePolicy: File
                envFrom:
                  - secretRef:
                      name: object-store-service
                image: ${BASE_IMAGE_REGISTRY_URL}/${NAMESPACE_PREFIX}-tools/${APP_NAME}-api:${NAMESPACE_ENVIRONMENT}
            restartPolicy: Always
            terminationGracePeriodSeconds: 30
            dnsPolicy: ClusterFirst
            securityContext: {}
            schedulerName: default-scheduler

    # Database Deployment <NAMESPACE_ENVIRONMENT>
    - kind: Deployment
      apiVersion: apps/v1
      metadata:
        name: ${APP_NAME}-db
        namespace: ${NAMESPACE_PREFIX}-${NAMESPACE_ENVIRONMENT}
        annotations:
          openshift.io/generated-by: OpenShiftWebConsole
        generation: 0
        labels:
          app: ${APP_NAME}
          name: ${APP_NAME}-db
          tag: ${TEMPLATE_TAG}
      spec:
        strategy:
          type: Recreate
          maxSurge: 50%
          maxUnavailable: 0
          resources: {}
          activeDeadlineSeconds: 21600
        replicas: ${{DB_REPLICAS}}
        revisionHistoryLimit: 5
        test: false
        selector:
          matchLabels:
            app: ${APP_NAME}
            name: ${APP_NAME}-db
        template:
          metadata:
            creationTimestamp: null
            labels:
              app: ${APP_NAME}
              name: ${APP_NAME}-db
              tag: ${TEMPLATE_TAG}
          spec:
            volumes:
              - name: ${APP_NAME}-db
                persistentVolumeClaim:
                  claimName: ${APP_NAME}-db
            containers:
              - resources:
                  limits:
                    cpu: ${DB_CPU_LIMIT}
                    memory: ${DB_MEMORY_LIMIT}
                  requests:
                    cpu: ${DB_CPU_REQUEST}
                    memory: ${DB_MEMORY_LIMIT}
                terminationMessagePath: /dev/termination-log
                name: ${APP_NAME}-db
                env:
                  - name: POSTGRES_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: ${DATABASE_CREDENTIALS_SECRET}
                        key: ${DATABASE_PASSWORD_KEY}
                  - name: POSTGRES_USER
                    valueFrom:
                      secretKeyRef:
                        name: ${DATABASE_CREDENTIALS_SECRET}
                        key: ${DATABASE_USER_KEY}
                  - name: POSTGRES_DATABASE
                    valueFrom:
                      secretKeyRef:
                        name: ${DATABASE_CREDENTIALS_SECRET}
                        key: ${DATABASE_NAME_KEY}
                  - name: PGDATA
                    value: /var/lib/pgsql/data/pgdata
                ports:
                  - containerPort: ${{DATABASE_PORT}}
                    protocol: TCP
                imagePullPolicy: Always
                volumeMounts:
                  - name: ${APP_NAME}-db
                    mountPath: /var/lib/pgsql/data
                terminationMessagePolicy: File
                image: ${BASE_IMAGE_REGISTRY_URL}/${NAMESPACE_PREFIX}-tools/postgres-postgis:latest
            restartPolicy: Always
            terminationGracePeriodSeconds: 30
            dnsPolicy: ClusterFirst
            securityContext: {}
            schedulerName: default-scheduler

    # Database PVC <NAMESPACE_ENVIRONMENT>
    - kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: ${APP_NAME}-db
        namespace: ${NAMESPACE_PREFIX}-${NAMESPACE_ENVIRONMENT}
        labels:
          app: ${APP_NAME}
          name: ${APP_NAME}-db
          tag: ${TEMPLATE_TAG}
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: ${DB_PVC_SIZE}
        storageClassName: netapp-block-standard
        volumeMode: Filesystem

    # DB Build Config
    - kind: BuildConfig
      apiVersion: build.openshift.io/v1
      metadata:
        name: postgres-postgis
        namespace: ${NAMESPACE_PREFIX}-tools
        labels:
          app: ${APP_NAME}
          name: postgres-postgis
          tag: ${TEMPLATE_TAG}
      spec:
        nodeSelector: null
        output:
          to:
            kind: ImageStreamTag
            name: 'postgres-postgis:latest'
        resources: {}
        successfulBuildsHistoryLimit: 5
        failedBuildsHistoryLimit: 5
        strategy:
          type: Docker
          dockerStrategy:
            env:
              - name: POSTGRES_PASSSWORD
                valueFrom:
                  secretKeyRef:
                    name: ${DEFAULT_POSTGRES_PASSWORD_SECRET}
                    key: ${DEFAULT_POSTGRES_PASSWORD_KEY}
            dockerfilePath: .docker/Dockerfile.db
        postCommit: {}
        source:
          type: Git
          git:
            uri: ${CRITTERBASE_GITHUB_URL}
        triggers:
          - type: ConfigChange
          - type: GitHub
            github:
              secretReference:
                name: ${CRITTERBASE_GITHUB_WEBHOOK_SECRET}


    # API Build Config <TOOLS>
    - kind: BuildConfig
      apiVersion: build.openshift.io/v1
      metadata:
        name: ${APP_NAME}-api
        namespace: ${NAMESPACE_PREFIX}-tools
        annotations:
          openshift.io/generated-by: OpenShiftWebConsole
        generation: 0
        labels:
          app: ${APP_NAME}
          name: ${APP_NAME}-api
          tag: ${TEMPLATE_TAG}
      spec:
        nodeSelector: null
        output:
          to:
            kind: ImageStreamTag
            name: ${APP_NAME}-api:${NAMESPACE_ENVIRONMENT}
        resources:
          limits:
            cpu: ${API_BUILD_CPU_LIMIT}
            memory: ${API_BUILD_MEMORY_LIMIT}
          requests:
            cpu: ${API_BUILD_CPU_REQUEST}
            memory: ${API_BUILD_MEMORY_REQUEST}
        successfulBuildsHistoryLimit: 1
        failedBuildsHistoryLimit: 1
        strategy:
          sourceStrategy:
            from:
              kind: ImageStreamTag
              name: 'nodejs-18:latest'
        postCommit: {}
        source:
          type: Git
          git:
            uri: ${CRITTERBASE_GITHUB_URL}
            ref: main
          contextDir: /
        triggers:
          - type: ImageChange
            imageChange:
              lastTriggeredImageID: ${BASE_IMAGE_REGISTRY_URL}/${NAMESPACE_PREFIX}-tools/nodejs-18:latest
          # Note: Currently this only triggers a build on initial build creation, this will be changed in the future
          # to re-build on ALL config changes
          - type: ConfigChange
          - type: GitHub
            github:
              secretReference:
                name: ${CRITTERBASE_GITHUB_WEBHOOK_SECRET}
        runPolicy: Serial

    # API Image Stream <TOOLS>
    - kind: ImageStream
      apiVersion: image.openshift.io/v1
      metadata:
        name: ${APP_NAME}-api
        namespace: ${NAMESPACE_PREFIX}-tools
        labels:
          app: ${APP_NAME}
          name: ${APP_NAME}-api
          tag: ${TEMPLATE_TAG}
      spec:
        lookupPolicy:
          local: false
        tags:
          - name: prod
          - name: prod-backup
          - name: test
          - name: dev

    # NodeJS 18 Image Stream <TOOLS>
    - kind: ImageStream
      apiVersion: image.openshift.io/v1
      metadata:
        name: nodejs-18
        namespace: ${NAMESPACE_PREFIX}-tools
        labels:
          app: ${APP_NAME}
          name: nodejs-18
          tag: ${TEMPLATE_TAG}
      spec:
        lookupPolicy:
          local: false
        tags:
          - name: latest
            annotations: null
            from:
              kind: DockerImage
              name: registry.redhat.io/rhel8/nodejs-18
            generation: 2
            importPolicy:
              importMode: Legacy
            referencePolicy:
              type: Local

    # Postgres PostGis Image Stream <TOOLS>
    - kind: ImageStream
      apiVersion: image.openshift.io/v1
      metadata:
        name: postgres-postgis
        namespace: ${NAMESPACE_PREFIX}-tools
        labels:
          app: ${APP_NAME}
          name: postgres-postgis
          tag: ${TEMPLATE_TAG}
      spec:
        lookupPolicy:
          local: false

    # Promote PROD Pipeline <TOOLS>
    - kind: Pipeline
      apiVersion: tekton.dev/v1
      metadata:
        name: promote-prod
        namespace: ${NAMESPACE_PREFIX}-tools
        labels:
          app: ${APP_NAME}
          name: promote-prod
          tag: ${TEMPLATE_TAG}
      spec:
        tasks:
          - name: tag-images
            params:
              - name: SCRIPT
                value: |
                  oc tag ${APP_NAME}-api:prod ${APP_NAME}-api:prod-backup
                  oc tag ${APP_NAME}-api:test ${APP_NAME}-api:prod
            taskRef:
              kind: ClusterTask
              name: openshift-client

    # Promote TEST Pipeline <TOOLS>
    - kind: Pipeline
      apiVersion: tekton.dev/v1
      metadata:
        name: promote-test
        namespace: ${NAMESPACE_PREFIX}-tools
        labels:
          app: ${APP_NAME}
          name: promote-test
          tag: ${TEMPLATE_TAG}
      spec:
        tasks:
          - name: tag-images
            params:
              - name: SCRIPT
                value: |
                  oc tag ${APP_NAME}-api:dev ${APP_NAME}-api:test
            taskRef:
              kind: ClusterTask
              name: openshift-client
